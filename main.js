!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(e){this._popup=e,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup__close")||e.target.classList.contains("popup_opened"))&&this.close()}))}}class s extends t{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".form"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){this._popupForm.reset(),super.close()}}const n=document.querySelector("#editProfileForm"),i=document.querySelector("#addCardForm"),r=document.querySelector(".elements"),o=document.querySelector(".profile__name"),l=document.querySelector(".profile__occupation"),a=document.querySelector("#popup__edit"),u=document.querySelector("#popup__add"),c=document.querySelector("#popup__pic"),_=document.querySelector("#name"),d=document.querySelector("#occupation"),p=document.querySelector(".profile__edit"),h=document.querySelector(".profile__add"),m={},E=t=>{const s=function(t){const s=new class{constructor(t,s,n){e(this,"_handleLikeButton",(()=>{this._likeBtn.classList.toggle("element__like-active")})),e(this,"_handleDeleteButton",(()=>{this._element.remove(),this._element=null})),this._name=t.name,this._link=t.link,this._handleCardClick=s,this._cardSelector=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){this._cardImage.addEventListener("click",this._handleCardClick),this._likeBtn.addEventListener("click",this._handleLikeButton),this._deleteBtn.addEventListener("click",this._handleDeleteButton)}generateCard(){return this._element=this._getTemplate(),this._likeBtn=this._element.querySelector(".element__like"),this._cardImage=this._element.querySelector(".element__image"),this._deleteBtn=this._element.querySelector(".element__delete"),this._text=this._element.querySelector(".element__name"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._text.textContent=this._name,this._setEventListeners(),this._element}}(t,(()=>{b.open(t)}),"#newCardTemplate");return s.generateCard()}(t);v.addItem(s)},v=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=t}renderer(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:E},r);v.renderer();const y=new class{constructor(e){let{userName:t,userJob:s}=e;this._userName=t,this._userJob=s}getUserInfo(){return{userName:this._userName.textContent,userJob:this._userJob.textContent}}setUserInfo(e){this._userName.textContent=e.name,this._userJob.textContent=e.about}}({userName:o,userJob:l}),b=new class extends t{constructor(e){super(e),this._caption=this._popup.querySelector(".popup__image-name"),this._img=this._popup.querySelector(".popup__image-picture")}open(e){let{link:t,name:s}=e;this._caption.textContent=s,this._img.src=t,this._img.alt=s,super.open()}}(c),g=new s(a,(e=>{y.setUserInfo(e),g.close()})),S=new s(u,(e=>{E({name:e.title,link:e.imageUrl}),S.close()}));var L;g.setEventListeners(),S.setEventListeners(),b.setEventListeners(),p.addEventListener("click",(function(){g.open();const e=y.getUserInfo();_.value=e.userName,d.value=e.userJob,m[n.getAttribute("id")].resetValidation()})),h.addEventListener("click",(function(){S.open(),m[i.getAttribute("id")].resetValidation()})),L={formSelector:".form",inputSelector:".popup__input",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_disabled",inputErrorClass:"popup__input-error",errorClass:"input-error_visible"},Array.from(document.querySelectorAll(".form")).forEach((e=>{const t=new class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleButtonState(),this._checkInputValidity(e)}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(L,e),s=e.getAttribute("id");m[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,